/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package udp_socket;

import com.sun.security.ntlm.Client;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import static udp_socket.EGNOS_Deploy.Client;
import static udp_socket.EGNOS_Deploy.nameNLESG2;
import static udp_socket.EGNOS_Deploy.NLESG2_LOADED;
import static udp_socket.EGNOS_Deploy.NLESG2_OPERATIONAL;
import static udp_socket.EGNOS_Deploy.NLESG2_UNKNOWN;
import static udp_socket.EGNOS_Deploy.listIPAddr;
import static udp_socket.EGNOS_Deploy.modeAsset;
import static udp_socket.EGNOS_Deploy.name;
import static udp_socket.EGNOS_Deploy.names;
import static udp_socket.EGNOS_Deploy.egnosAddress;
import static udp_socket.EGNOS_Deploy.egnosAddresses;
import static udp_socket.EGNOS_Deploy.filesToUpload;
import static udp_socket.EGNOS_Deploy.UPLOADNLESG2;

/**
 *
 * @author admin
 */
public class GUI extends javax.swing.JFrame {
    
    //GLOBAL VARIABLES
    public static String selectedIP = "";
    public static int selectedIndex = 0;
    public static String assetName;
    public static int assetEgnosAddress = 0;
    public static List<String> selectedUpload = new ArrayList<String>();
    public static int [] selectedUploadIndices;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_ipAddresses = new javax.swing.JButton();
        list1 = new java.awt.List();
        jButton_assetMode = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_IP = new javax.swing.JList<>();
        jButton_sendRESET = new javax.swing.JButton();
        jButton_uploadFiles = new javax.swing.JButton();
        jButton_sendINSTALL = new javax.swing.JButton();
        jButton_sendINITINSTALL = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_uploadFiles = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EGNOS NLES G2 Install");

        jButton_ipAddresses.setText("Read IP addresses");
        jButton_ipAddresses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ipAddressesActionPerformed(evt);
            }
        });

        jButton_assetMode.setText("Identify Asset Mode");
        jButton_assetMode.setEnabled(false);
        jButton_assetMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_assetModeActionPerformed(evt);
            }
        });

        jList_IP.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_IPValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList_IP);

        jButton_sendRESET.setText("Send RESET");
        jButton_sendRESET.setEnabled(false);
        jButton_sendRESET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_sendRESETActionPerformed(evt);
            }
        });

        jButton_uploadFiles.setText("Upload files");
        jButton_uploadFiles.setEnabled(false);
        jButton_uploadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_uploadFilesActionPerformed(evt);
            }
        });

        jButton_sendINSTALL.setText("Send INSTALL");
        jButton_sendINSTALL.setEnabled(false);

        jButton_sendINITINSTALL.setText("Send INIT INSTALL");
        jButton_sendINITINSTALL.setEnabled(false);

        jList_uploadFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_uploadFilesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList_uploadFiles);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_assetMode)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_ipAddresses)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton_uploadFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_sendRESET, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_sendINSTALL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_sendINITINSTALL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_ipAddresses)
                    .addComponent(jButton_uploadFiles)
                    .addComponent(jButton_sendRESET))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_sendINSTALL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_sendINITINSTALL)
                        .addGap(12, 12, 12))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(jButton_assetMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ipAddressesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ipAddressesActionPerformed
        
        //Disable button
        jButton_ipAddresses.setEnabled(false);
        
        //Display IPs in the list
        try {
            // TODO add your handling code here:
            listIPAddr = Client.readIPFile();
            
            DefaultListModel model = new DefaultListModel();
            
            for (int i = 0; i < listIPAddr.length; i++) {
                model.addElement(listIPAddr[i]);
            }

            jList_IP.setModel(model);
            
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_ipAddressesActionPerformed

    private void jButton_assetModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_assetModeActionPerformed
        
        try {
            log("Identifying " + assetName + " " + assetEgnosAddress + " mode...");
            Client.multicastSocket(assetName);
            
            if (modeAsset != NLESG2_LOADED && modeAsset != NLESG2_UNKNOWN && modeAsset != NLESG2_OPERATIONAL) {
                log("Need to send RESET before proceeding");
            }
            
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_assetModeActionPerformed

    private void jList_IPValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_IPValueChanged
        //Get selection and index
        selectedIP = jList_IP.getSelectedValue();
        selectedIndex = jList_IP.getSelectedIndex();
        
        //Get size of list (number of assets)
        if(jList_IP.getModel().getSize() == 1){
            assetName = name;
            assetEgnosAddress = egnosAddress;
        } 
        else{
            assetName = names[selectedIndex];
            assetEgnosAddress = egnosAddresses[selectedIndex];
        }
        
        log("Selected IP: " + selectedIP + " ; name: " + assetName + " ; EGNOS address: " + assetEgnosAddress);
        
        
        //Display files to upload
        DefaultListModel model = new DefaultListModel();
        
        if (assetName.equals(nameNLESG2)) {
            filesToUpload = Client.whatsInTheFolder(UPLOADNLESG2);
            
            
            for (int i = 0; i < filesToUpload.length; i++) {
                model.addElement(filesToUpload[i]);
            }
            
            //Multiple selection
            jList_uploadFiles.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            
        }
        else {
            model.removeAllElements();
        }
        
        jList_uploadFiles.setModel(model);
        
        //Enable buttons
        jButton_assetMode.setEnabled(true);
    }//GEN-LAST:event_jList_IPValueChanged

    private void jButton_sendRESETActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_sendRESETActionPerformed
        //Disable buttons
        jButton_sendRESET.setEnabled(false);
        jButton_uploadFiles.setEnabled(false);
        
        try {
            Client.cmdReset(selectedIP);
            log("RESET sent to " + assetName);
            log("Waiting for " + assetName);
            
            //Add if(NLESG2) condition
            Client.NLESG2_isItLoaded(assetName);
            log(assetName + " is ready");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Enable button
        jButton_sendRESET.setEnabled(true);
        jButton_uploadFiles.setEnabled(true);
    }//GEN-LAST:event_jButton_sendRESETActionPerformed

    private void jList_uploadFilesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_uploadFilesValueChanged
        
        selectedUpload = jList_uploadFiles.getSelectedValuesList();
        selectedUploadIndices = jList_uploadFiles.getSelectedIndices();
        for (int i = 0; i < selectedUpload.size(); i++) {
            log("To upload: " + selectedUpload.get(i));
        }
        
        jButton_uploadFiles.setEnabled(true);
        
    }//GEN-LAST:event_jList_uploadFilesValueChanged

    private void jButton_uploadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_uploadFilesActionPerformed
        // TODO add your handling code here:
        String[] fileName = selectedUpload.toArray(new String[0]);
        for (int i = 0; i < fileName.length; i++) {
            log("Waiting for upload: " + fileName[i]);
        }
        
        if (assetName.equals(nameNLESG2)) {
            Client.uploadFile(selectedIP, UPLOADNLESG2, fileName);
        }
    }//GEN-LAST:event_jButton_uploadFilesActionPerformed

    public void log(String message) {
        Date date = new Date();
        SimpleDateFormat ft = new SimpleDateFormat("[hh:mm:ss] ");
        list1.add(ft.format(date) + message, 0);
        //System.out.println(message);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_assetMode;
    private javax.swing.JButton jButton_ipAddresses;
    private javax.swing.JButton jButton_sendINITINSTALL;
    private javax.swing.JButton jButton_sendINSTALL;
    private javax.swing.JButton jButton_sendRESET;
    private javax.swing.JButton jButton_uploadFiles;
    private javax.swing.JList<String> jList_IP;
    private javax.swing.JList<String> jList_uploadFiles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables
}
